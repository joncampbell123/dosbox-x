/*
 * Copyright (c) 2000 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 * 
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */
/*
 * @OSF_COPYRIGHT@
 * 
 */
/*
 *	File: mach/lock_set.defs
 *	Author: Joseph CaraDonna
 *
 *	Exported kernel calls	
 *
 */

subsystem
#if	KERNEL_SERVER
	KernelServer
#endif	/* KERNEL_SERVER */
			lock_set 617000;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

/*
 * OBSOLETE interfaces
 * a lock_set_t is created and destroyed through the task object.
 *      lock_set_create(task,&lock_set_t,...);
 *      lock_set_destroy(task,lock_set_t);
 */

/*
 * OBSOLETE interfaces
 */
routine lock_acquire(
		lock_set	: lock_set_t;
		lock_id		: int);

routine lock_release(
		lock_set	: lock_set_t;
		lock_id		: int);

routine lock_try(
		lock_set	: lock_set_t;
		lock_id		: int);

routine lock_make_stable(
		lock_set	: lock_set_t;
		lock_id		: int);

routine lock_handoff(
		lock_set	: lock_set_t;
		lock_id		: int);

routine lock_handoff_accept(
		lock_set	: lock_set_t;
		lock_id		: int);

/* vim: set ft=c : */
