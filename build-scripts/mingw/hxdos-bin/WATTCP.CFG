#
#  Waterloo TCP/IP sample configuration file.
#
#  Use this file as a template to make your own.
#  This file should be located in "current directory" or in a directory
#  pointed to by the environment variable "WATTCP.CFG".
#
#  E.g. Put a copy of this file in "c:\net\watt\bin" and insert this
#       line in your AUTOEXEC.BAT:
#         set wattcp.cfg=c:\net\watt\bin
#
#  Note 1: No trailing `\' at end of line, and no spaces around the `='.
#
#  Note 2: The order of keywords/value pairs are significant.
#    For instance you have "my_dns = 134.121.10.8" in your
#    "c:\net\watt\bin\hosts" file, then "hosts = c:\net\watt\bin\hosts"
#    MUST be listed before the line specifying your nameserver;
#    "nameserver = my_dns".  The same rule applies to "gateway" and "cookie"
#
#  Note 3: the value (right of `=') is the default if you comment the
#    line out. Comments starts with `#' or `;'. To use `#' or `;' inside
#    string values, the string MUST be put in quotes.
#    E.g. these keywords have different values:
#      keyword = "hello world #;"
#      keyword = "hello world "#;
#
#  Note 4: The right-side value may contain an environment variable that
#    will be expanded when read. The effect is like in makefiles.
#    E.g. if environment variable ETC is "c:\net\watt\bin",
#         "$(ETC)\hosts" becomes "c:\net\watt\bin\hosts" after
#         expansion.  See "README.TOO" for details.
#
#  Note 5. Remember that all this text takes time to parse (especially on
#    a 386 CPU). Cut down the contents of your "WATTCP.CFG" (not this file,
#    a copy) to a minimum to improve speed.
#
#
# Text printed to screen (stdout).
#
print = "Waterloo TCP/IP setup"  ; optional key/value

#
# If using a fixed IP-address, insert the dotted decimal address below.
# If your LAN has a DHCP server, use "my_ip = dhcp".
# Likewise, if you want to get your IP-address via BOOTP or RARP servers.
#
my_ip = 192.168.1.2 ; really is 0.0.0.0, mandatory

#
# The name of this host excluding the domain-name.
# Note: may be overridden by DHCP/BOOTP server.
#       Max 50 characters.
#
hostname = "random-pc" ; optional

#
# A better method would be to define it via the environment.
#
#hostname = $(HOSTNAME)

#
# The netmask specifying the sub-net your are on.
# Note: may be overridden by DHCP/BOOTP server.
#
netmask = 255.255.255.0  ; mandatory if not using DHCP

#
# IP-address (or name) of DNS host(s). The DNS host's job is to
# translate hostnames to IP-addresses if the hostname isn't listed
# in $(ETC)\hosts.
#
# Note: DHCP/BOOTP servers may add additional nameservers to the one(s)
#       you specify here.
# Note: There are no default servers.  There can be a total of 10
#       nameservers. All nameserver are queried in sequence until an
#       IP-address is returned. Enter the "fastest" nameserver first
#       for best result.
#
# nameserver = 0.0.0.0  ; primary DNS, mandatory if not using DHCP
# nameserver = 0.0.0.0  ; secondary DNS, optional

#
# The IP-address (or name) of the LAN's gateway.
# If your are running DOS-PPP with EtherNet emulation this should be
# replaced with $(REMIP). For SLIP or normal PPP, gateway is not used.
#
# The syntax is "ip-addr [,subnet [,mask]]"
#
# Notes: Will most likely be overridden by DHCP/BOOTP server.
#        The ARP-routing table is limited to 12 gateways.
#
# gateway = 0.0.0.0  ; mandatory if not using BOOTP/DHCP

#
# The Internet Domain Name of your network (of which your sub-net is
# part of). The "Fully Qualified Domain Name" (FQDN) of your host is
# hostname + domain_list. E.g. "random-pc.your.domain.com".
#
# Note: domain_list (or previously named domainslist) is used by DNS to
#       resolve "dot-less names" (i.e. no `.' in host-name) recursively.
#       E.g. resolving "random-pc2" will query DNS for these names until
#            an IP-address is found:
#              "random-pc2.your.domain.com"
#              "random-pc2.domain.com"
#              "random-pc2.com"
#              "random-pc2"
#
# Note: domain_list may be overridden by DHCP server.
#       Max 50 characters.
#
domain_list = your.domain.com  ; mandatory if not using DHCP

#
# The old name for "domain_list". It has the same effect as
# "domain_list". Don't use both versions.
#
# domainslist = your.domain.com  ; mandatory if not using DHCP

#
# The total time waiting for response (and including retransmissions)
# from each DNS-host. The total host lookup time is <domain_to> *
# <number of nameservers>.  A value <4*sockdelay> is used if not defined
# (or if domain_to = 0).
#
domain_to = 0  ; optional

#
# Used by the BSD-socket API and connect() function (and for DNS-lookups).
# Default value is 30 sec.
#
sockdelay = 30  ; optional

#
# Inactivity timeout for TCP-sockets. A timer is started at reception
# of a TCP-packet and checked at each tcp_tick().
# Default value is 0 meaning no timeout.
#
inactive = 0  ; optional

#
# Data timeout for TCP-sockets. A timer is started when data is sent
# and checked at each tcp_tick(). The socket is closed if timed out.
# Default value is 120 (2min).
#
datatimeout = 120 ; optional

#
# Enable UDP/TCP-debug mode. Set to 1 (or 2 for more details) to print
# information regarding the TCP state-machine or UDP errors etc.
# Default value is 0.
#
debug = 0  ; optional

#
# Maximum Segment Size. The maximum size of each TCP-segment you are
# willing to receive is specified here. The upper limit of MSS is 40
# bytes less than the MRU (Maximum Receive Unit) of the link-layer.
# 40 = size of IP+TCP headers.
# E.g. 1460 for EtherNet or the MRU-40 for a PPP-driver.
#
# MSS is only used for TCP-sockets. The size of received
# UDP-datagrams cannot be controlled, but is limited to 1472 (1500-28).
#
# Default value of MSS is 1460.
#
mss = 1460  ; optional

#
# Maximum Transmission Units. The maximum size of any packet sent to the
# link-layer.
#
# Default value is 1500.
#
mtu = 1500  ; optional

#
# MTU discovery on opening TCP connections (ref. RFC1323)
# Not implemented yet, hence no effect.
#
mtu_disc = 0   ; optional

#
# Sending an "ICMP Mask Request" message after startup may help isolate
# problems caused by setting wrong 'netmask' (see above).
# The ICMP message is sent as link-layer broadcast and destination IP
# 255.255.255.255.
# There must be a host on the subnet that can answer this ICMP request.
# A warning ("Conflicting net-mask from ICMP Addr Mask Reply") is printed
# if the 2 netmasks differ.  Refer RFC-950 for details.
#
icmp_mask_req = 0  ; optional

#
# IP-address (or name) of cookie servers used by the COOKIE program.
# Most WinNT servers have cookie jars (allthough dull quotes).
# No default.
#
# cookie = 0.0.0.0 ; optional

#
# $(ETC) is an environment variable that should point to your Waterloo
# bin-directory.
#
# File specifying the language translations for all strings internal
# to Waterloo.  Only German (de), Norwegian (no) and Swedish (se)
# translations are included at the moment.  The WATLANG.TXT file is
# very incomplete at this moment, so the effective language is English (en).
#
language = en,$(ETC)\watlang.txt

#
# File specifying the list of <host-names> to <ip-address> mappings.
# This file is queried before any DNS-host is queried.
# Note: Win95/98/NT users may use the `hosts' file of the system.
#       On Win95/98   use `hosts = $(WINDIR)\system\hosts'
#       On WinNT/2000 use `hosts = $(WINDIR)\system32\drivers\etc\hosts'
#
# Same note applies to the `services', `protocol' and `networks' files.
#
hosts = $(ETC)\hosts

#
# File specifying the list of <service-name> to <protocol> mappings.
# This file is used by the <netdb.h> functions (getservbyname() etc).
#
services = $(ETC)\services

#
# File specifying the list of <IP-protocol-name> to <IP-protocol-numbers>
# mappings. This file is used by the <netdb.h> functions (getprotobyname() etc).
#
# Note: this file should NOT be named `protocols' to avoid problems under
# Win95/98 and targets supporting long file-names (e.g. djgpp)
#
protocols = $(ETC)\protocol

#
# File specifying the list of <network-numers> to <domain-names>
# mappings. This file is used by the <netdb.h> functions (getnetbyname() etc).
#
networks = $(ETC)\networks


#######################################################################
########                                                       ########
########  EVERYTHING BELOW THIS LINE IS FOR ADVANCED USE ONLY  ########
########                                                       ########
#######################################################################

#
# multihomes    = 0                         ; uses MY_IP - MY_IP+n
# ethip         = <ether-addr1>, <ip-addr1> ; static ARP-table
# ethip         = <ether-addr2>, <ip-addr2> ;
# ethip         = <ether-addr3>, <ip-addr3> ;
# eaddr         = <ether-addr>              ; sets my ether-address
# bootp         = 255.255.255.255           ; BOOTP host address
# bootp_to      = 30                        ; BOOTP timeout

# redirects     = tcp,udp,icmp,igmp   ; honour ICMP redirects (0 disables)
# txretries     = 2                   ; # of extra Tx-retries if Tx fails

# nagle         = 1                   ; TCP Nagle algorithm
# arp_to        = 2                   ; ARP resolver timeout        (def 2 sec)
# arp_alive     = 300                 ; ARP life for cached entries (def 5 min)
# netdb_alive   = 900                 ; cache-timeout for resolve   (def 15 min)
# pkt_intr      = 0x60  !! to-do      ; Pkt-drvr interrupt

# dhcp.host     = 0.0.0.0             ; DHCP host address (broadcast)
# dhcp.inform   = 0                   ; Send DHCP inform message
# dhcp.trace    = 0                   ; Enable DHCP debugging
# dhcp.bcast    = 0                   ; broadcast flag for older DHCPD (or WinNT)
# dhcp.timeout  = 30                  ; timeout while waiting for DHCP offer
# dhcp.retries  = 3                   ; # of DHCP discover retries
# dhcp.arpcheck = 0                   ; Do an ARP Request on own IP (gratuitous ARP)
# dhcp.req_list = 3,6,8,9,12,15,19,20,23,26,35,36,37,38

# ip.def_ttl    = 254                 ; default "Time To Live" for IP
# ip.def_tos    = 0                   ; default "Type Of Service" for IP
# ip.id_incr    = 1                   ; default increment of IP identifiers
# ip.frag_reasm = 15                  ; default max fragment reassembly time

# include       = ?$(ETC)\pppd.cfg    ; PPP configuration
# include       = ?$(ETC)\slip.cfg    ; SLIP configuration

#
# Protocol debugging stuff (not related to "debug" above).
#
# Activated by calling dbug_init() before calling sock_init()
# from application. See "README.TOO" for details.
#
# name of debug file ("con" for console, "nul" for NULL-device).
# Put on RAM-disk for best performance.
#
debug.file = wattcp.dbg  ; optional

#
# Don't show packets not destined for us or not generated by us.
# A combination of these values can be specified:
#
#  ETH   -> discard link-layer packets (for EtherNet/TokenRing only)
#  ARP   -> discard ARP packets        (for EtherNet/TokenRing only)
#  RARP  -> discard RARP packets       (for EtherNet/TokenRing only)
#  IP    -> discard IP packets         (for EtherNet/TokenRing/PPP/SLIP)
#  BCAST -> discard link-layer broadcast or IP-broadcast
#  ALL   -> discard everything not to/from us.
#  NONE  -> show all packets received.
#
debug.filter = none

#
# Which protocols (headers and data) to debug.  A combination of
# these values can be specified:
#  ETH, ARP, RARP, IP, UDP, TCP, ICMP, IGMP or ALL.
#
debug.proto = arp/rarp/ip/udp/tcp/icmp

#
# What part of a packet to dump;
#  HEADER -> dump only network layer headers.
#  ALL    -> both header and ascii/binary data-dump.
#
debug.mode = header

#
# Dump values of statistics counters i.e. packets received/transmitted
# etc. to debug.file at program exit.
#
debug.stat = 0


##
## Socket-layer debugging stuff. Only used by BSD-socket API.
## Activated by calling dbug_init() before calling sock_init()
## from application.
##
#
# where to print socket-debug;
#   <file>, "con", "stdout", "stderr" or "nul". No default.
#
# As with "debug.file", put on RAM-disk for best performance.
#
sk_debug.device = wattcp.sk

#
# C-style open mode for the "sk_debug.device".
#  "w+" write (and create if not exists)
#  "a"  append to file
#  "t"  "sk_debug.device" is a text-file.
#
sk_debug.openmode = w+  ; default

#
# Service-order for DNS name lookups. Use `hosts' first, then
# use resolve if name not in `hosts' file.
# Not yet implemented; order is always "hosts,bind"
#
# host.conf = order hosts, bind

#
# Allow the following hosts to connect to our TCP listening sockets.
# Use comma-separated list for single hosts or regexp for multiple hosts.
# Ranges can be specified using "network/mask" notation. E.g.
#   "tcpd.hosts.allow = 133.212/16" will allow the hosts in range
# 133.212.0.0 - 133.212.255.255.
# Not yet implemented; all hosts are allowed
#
# tcpd.hosts.allow = *

#
# Deny the following hosts to connect to our TCP listening sockets.
# Use comma-separated list for single hosts or regexp for multiple hosts.
# Ranges can be specified using "network/mask" notation. See above.
# Not yet implemented; only the broadcast and null-addresses are denied.
#
# tcpd.hosts.deny = 255.255.255.255, 0.0.0.0

#
# Simple syslog client configuration. Sends log messages to file and/or
# a logging host. Protocol used is UDP (unicast or broadcast).
#
# Messages are appended to file. Default file-name is extracted from
# path and name of current application.
#
syslog.file = ; optional

#
# Which host to send logging messages to. If not specified here, it may
# be received via BOOTP or DHCP (if specified by "my_ip = dhcp", or
# "wattcp.cfg file is not found). The host MUST be a name listed in
# "$(ETC)\hosts" or a dotted IP-address. You can also specify a broadcast
# IP-address and hope messages are picked up by a logging daemon.
#
syslog.host = ; optional

#
# Which UDP destination port to send to. Default is 514.
# The port is first searched in "$(ETC)\services". The line should be
# "syslog 514/udp". If not found there, the following port is used.
# i.e. the following line is overruled by "syslog port/udp" in
#     "$(ETC)\services".
#
syslog.port = 514  ; optional

#
# What syslog messages shall be written to file and/or sent to logging host.
#
# A combination of the following may be specified: <syslog.h> flags
#  emerg    => system is unusable                  (LOG_EMERG)
#  alert    => action must be taken immediately    (LOG_ALERT)
#  crit     => critical conditions                 (LOG_CRIT)
#  error    => error conditions                    (LOG_ERR)
#  warning  => warning conditions                  (LOG_WARNING)
#  notice   => normal but significant condition    (LOG_NOTICE)
#  info     => informational                       (LOG_INFO)
#  debug    => debug-level messages                (LOG_DEBUG)
#  all      => all combinations above.
#
# Default level is "emerg/alert/error"
#
syslog.level = emerg/alert/error  ; optional

#
# TFTP client configuration (experimental)
# When using DHCP (BOOTP not supported yet), a file may be requested
# from a TFTP-server (or DHCP-server).
#
# Specify what file to load. Normally this file is present in
# DHCP-option 67, but can be specified here. Note: file-name is
# server's file-name and may contain a path.
#
tftp.boot_file = ; optional

#
# Specify what server (dotted ip-address or host from `hosts' file) to
# get BOOT-file from. If not specified here, DHCP-server is used.
#
tftp.server = ; optional

#
# Specify timeout (in seconds) waiting for each packet from TFTP-server.
#
tftp.timeout = 8 ; optional

#
# Specify retry count waiting for packets from TFTP-server.
#
tftp.retry = 5 ; optional
